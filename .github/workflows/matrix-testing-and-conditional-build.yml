name: Matrix Testing & Conditional Build

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  pull_request:
  schedule:
    - cron: "0 3 * * *"   # Nightly test at 3 AM UTC
  workflow_dispatch:
    inputs:
      direct_deploy:
        description: "Directly deploy to GitHub Pages (use build from build-archive branch)?"
        required: false
        default: "false"

permissions:
  contents: write
  pages: write
  id-token: write


jobs:
  Nightly-Nodejs-Test:
    name: Nightly 3AM UTC - Node:current on ubuntu-latest
    if: ${{ github.event_name == 'schedule'}}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (ubuntu-latest)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        shell: bash
        run: |
          mkdir -p test-results
          npm test -- --coverage --ci \
            --coverageReporters=text-summary \
            > test-results/nightly-test-result.txt
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: nightly-test-results-${{ github.job }}-${{ github.run_id }}
          path: frontend/test-results/nightly-test-result.txt

          
  Run-Matrix-Test:
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.direct_deploy != 'true' || github.event_name != 'schedule' }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./frontend/
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-latest','windows-latest']
        node-version: ['16','18','20']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        shell: bash
        run: |
          mkdir -p test-results
          npm test -- --coverage --ci \
            --coverageReporters=text-summary \
            > test-results/results-${{ matrix.os }}-${{ matrix.node-version }}.txt
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
          path: frontend/test-results/results-${{ matrix.os }}-${{ matrix.node-version }}.txt

  Test-Coverage-Report:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.direct_deploy != 'true' || github.event_name != 'schedule' }}
    needs: Run-Matrix-Test
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Extract and show Test Coverage Summary
        id: coverage
        run: |
          echo "=== Dumping test results for debug ==="
          # Should I enable them or Not?
          # ls -R test-results || true
          # cat test-results/*/results-*.txt || true

          # Extract all coverage values (strip %)
          line_values=$(grep "Lines" test-results/*/results-*.txt | awk -F": " '{print $2}' | awk '{print $1}' | tr -d '%')
          statement_values=$(grep "Statements" test-results/*/results-*.txt | awk -F": " '{print $2}' | awk '{print $1}' | tr -d '%')
          func_values=$(grep "Functions" test-results/*/results-*.txt | awk -F": " '{print $2}' | awk '{print $1}' | tr -d '%')
          branch_values=$(grep "Branches" test-results/*/results-*.txt | awk -F": " '{print $2}' | awk '{print $1}' | tr -d '%')

          # Average function (bash only supports int math)
          avg() {
            local values=($@)
            local sum=0
            local count=0
            for v in "${values[@]}"; do
              sum=$((sum + v))
              count=$((count + 1))
            done
            [ $count -eq 0 ] && echo 0 || echo $((sum / count))
          }

          line_coverage=$(avg $line_values)
          statement_coverage=$(avg $statement_values)
          func_coverage=$(avg $func_values)
          branches_coverage=$(avg $branch_values)

          coverage=$(( (line_coverage + statement_coverage + func_coverage + branches_coverage) / 4 ))

          echo "=== Test Coverage SUMMARY ===" > matrix-test-coverage-summary.txt
          echo "Line_coverage: $line_coverage" >> matrix-test-coverage-summary.txt
          echo "Statement_coverage: $statement_coverage" >> matrix-test-coverage-summary.txt
          echo "Func_coverage: $func_coverage" >> matrix-test-coverage-summary.txt
          echo "Branches_coverage: $branches_coverage" >> matrix-test-coverage-summary.txt
          echo -e "\nAvg Coverage: $coverage" >> matrix-test-coverage-summary.txt
          echo "=============================" >> matrix-test-coverage-summary.txt

          echo "coverage=$coverage" >> $GITHUB_OUTPUT


      - name: Fail if coverage < 70
        run: |
          coverage=${{ steps.coverage.outputs.coverage }}
          echo "Checking coverage: $coverage%"
          if [ -z "$coverage" ]; then
            echo "⚠️ Coverage not detected, treating as 0%"
            coverage=0
          fi
          if [ "$coverage" -lt 70 ]; then
            echo "❌ Coverage below threshold (found $coverage%)"
            exit 1
          else
            echo "✅ Coverage is acceptable: $coverage%"
          fi
      
      - name: Upload coverage summary artifact
        uses: actions/upload-artifact@v4
        with:
          name: matrix-test-coverage-summary
          path: matrix-test-coverage-summary.txt


  Build:
    runs-on: ubuntu-latest
    needs: Test-Coverage-Report
    if: |
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.direct_deploy != 'true' || github.event_name != 'schedule')
    defaults:
      run:
        working-directory: frontend/
    concurrency:
      # build2 because collision with Multi branch environment workflow will occur
      group: build2-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: |
          npm run build
          mkdir -p dist
          echo "Build complete for $GITHUB_SHA" > dist/build.txt

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: frontend/dist/

  Save-Build-To-Branch:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.direct_deploy != 'true' || github.event_name != 'schedule' }}
    needs: Build
    steps:
      - name: Checkout empty repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # needed to push branch
          
      - name: Delete branch if exists (remote)
        run: |
          git push origin --delete build-archive || true

      - name: Create fresh orphan branch
        run: |
          git checkout --orphan build-archive
          git reset --hard
          git clean -fdx

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: ./dist

      - name: Commit build contents
        run: |
          rm -rf .github   # optional, avoid polluting branch with workflows
          git add dist
          git -c user.name="github-actions[bot]" \
              -c user.email="41898282+github-actions[bot]@users.noreply.github.com" \
              commit -m "Build archive for $GITHUB_SHA"

      - name: Force push build branch
        run: |
          git push origin build-archive --force

  Deploy-to-GH-Pages:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'schedule' }}
    needs: Save-Build-To-Branch
    environment: github-pages
    concurrency:
      group: deploy-gh-pages-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Try to download existing github-pages artifact
        id: check-existing
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: ./github-pages-check
        continue-on-error: true

      - name: Delete Previous github-pages artifact if exists
        id: validate-existing
        if: ${{ steps.check-existing.outcome == 'success' }}
        uses: geekyeggo/delete-artifact@v5 
        with:          
          name: github-pages

      - name: Checkout build-archive branch
        uses: actions/checkout@v4
        with:
          ref: build-archive

      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Set Slack message on success
        if: ${{ steps.deployment.outcome == 'success' }}
        run: echo "SLACK_MESSAGE=✅ Deployment successful!" >> $GITHUB_ENV

      - name: Set Slack message on failure
        if: ${{ steps.deployment.outcome != 'success' }}
        run: echo "SLACK_MESSAGE=❌ Deployment failed!" >> $GITHUB_ENV


      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_GH_PAGES }}
          slack-message: |
            🚀 *GitHub Pages Deployment Status*
            - *Message*: ${{ env.SLACK_MESSAGE }}
            - *Commit:* `${{ github.sha }}`
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

